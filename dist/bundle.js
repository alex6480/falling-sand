/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/Dust.ts":
/*!*********************!*\
  !*** ./src/Dust.ts ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Dust\": () => (/* binding */ Dust)\n/* harmony export */ });\nvar Dust = /** @class */ (function () {\r\n    function Dust(color) {\r\n        this.rendered = false;\r\n        this.physicsType = \"solid\";\r\n        this.active = true;\r\n        this.noise = Math.random();\r\n        this.color = color;\r\n    }\r\n    Dust.prototype.step = function (world, x, y) {\r\n    };\r\n    Dust.prototype.render = function (ctx, scale, x, y) {\r\n        var alpha = 1 - this.noise * 0.2;\r\n        ctx.fillStyle = \"rgb(\" + this.color.red * alpha + \", \" + this.color.green * alpha + \", \" + this.color.blue * alpha + \")\";\r\n        ctx.fillRect(x * scale, y * scale, scale, scale);\r\n    };\r\n    Dust.prototype.getPointsTo = function (from, to) {\r\n        var result = [];\r\n        for (var i = from.y; i <= to.y; i++) {\r\n            result.push({ x: from.x, y: i });\r\n        }\r\n        return result;\r\n    };\r\n    return Dust;\r\n}());\r\n\r\n\n\n//# sourceURL=webpack://fallingsandtest/./src/Dust.ts?");

/***/ }),

/***/ "./src/DustType/Gravel.ts":
/*!********************************!*\
  !*** ./src/DustType/Gravel.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Gravel\": () => (/* binding */ Gravel)\n/* harmony export */ });\n/* harmony import */ var _Sand__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Sand */ \"./src/DustType/Sand.ts\");\nvar __extends = (undefined && undefined.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        if (typeof b !== \"function\" && b !== null)\r\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n\r\nvar Gravel = /** @class */ (function (_super) {\r\n    __extends(Gravel, _super);\r\n    function Gravel() {\r\n        var _this = _super.call(this) || this;\r\n        _this.velocity = { x: 0, y: 0 };\r\n        _this.dispersionFactor = 2;\r\n        _this.dispersionAmount = 0;\r\n        _this.color = {\r\n            red: 180,\r\n            blue: 120,\r\n            green: 180\r\n        };\r\n        _this.dispersionAmount = 1;\r\n        return _this;\r\n    }\r\n    return Gravel;\r\n}(_Sand__WEBPACK_IMPORTED_MODULE_0__.Sand));\r\n\r\n\n\n//# sourceURL=webpack://fallingsandtest/./src/DustType/Gravel.ts?");

/***/ }),

/***/ "./src/DustType/Sand.ts":
/*!******************************!*\
  !*** ./src/DustType/Sand.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Sand\": () => (/* binding */ Sand)\n/* harmony export */ });\n/* harmony import */ var _Dust__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Dust */ \"./src/Dust.ts\");\nvar __extends = (undefined && undefined.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        if (typeof b !== \"function\" && b !== null)\r\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n\r\nvar Sand = /** @class */ (function (_super) {\r\n    __extends(Sand, _super);\r\n    function Sand() {\r\n        var _this = _super.call(this, {\r\n            red: 230,\r\n            blue: 10,\r\n            green: 220\r\n        }) || this;\r\n        _this.velocity = { x: 0, y: 0 };\r\n        _this.dispersionFactor = 10;\r\n        _this.dispersionAmount = 0;\r\n        _this.dispersionDistance = 1;\r\n        _this.physicsType = \"sand\";\r\n        return _this;\r\n    }\r\n    Sand.prototype.step = function (world, x, y) {\r\n        var _this = this;\r\n        var dustBelow = world.getDust(x, y + 1);\r\n        var newX = x;\r\n        var newY = y;\r\n        if (dustBelow === null || dustBelow === \"out-of-bounds\" || (dustBelow.physicsType == \"sand\" && this.velocity.y < dustBelow.velocity.y)) {\r\n            // If there is space below the current spec of dust, it should fall\r\n            //this.velocity.y = Math.max(this.velocity.y, this.dispersionAmount / Math.max(1, this.dispersionFactor));\r\n            this.dispersionAmount = Math.sqrt(this.velocity.y) * this.dispersionFactor;\r\n            this.velocity.y += world.gravity;\r\n        }\r\n        else {\r\n            // Try to disperse the sand sideways\r\n            var dispersionResultLeft = this.tryDisperse(world, newX, newY, \"left\");\r\n            if (dispersionResultLeft !== null) {\r\n                newX = dispersionResultLeft.x;\r\n                newY = dispersionResultLeft.y;\r\n            }\r\n            else {\r\n                var dispersionResultRight = this.tryDisperse(world, newX, newY, \"right\");\r\n                if (dispersionResultRight !== null) {\r\n                    newX = dispersionResultRight.x;\r\n                    newY = dispersionResultRight.y;\r\n                }\r\n                else {\r\n                    this.velocity.y = 0;\r\n                    this.dispersionAmount = 0;\r\n                }\r\n            }\r\n            this.dispersionAmount = Math.max(0, this.dispersionAmount * 0.8 - 1);\r\n        }\r\n        // Try to move\r\n        var targetX = Math.ceil(x + this.velocity.x);\r\n        var targetY = Math.ceil(y + this.velocity.y);\r\n        var steps = this.getPointsTo({ x: x, y: y }, { x: targetX, y: targetY });\r\n        for (var i = 1; i < steps.length; i++) {\r\n            var step = steps[i];\r\n            var dustAtPosition = world.getDust(step.x, step.y);\r\n            if (dustAtPosition === \"out-of-bounds\") {\r\n                // This spec of sand fell out of the world.\r\n                // Just remove it\r\n                world.setDust(x, y, null);\r\n                return;\r\n            }\r\n            if (dustAtPosition === null) {\r\n                newX = step.x;\r\n                newY = step.y;\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        if (newX == x && newY == y && this.velocity.y == 0 && this.dispersionAmount == 0) {\r\n            // Inactivate the dust spec as no further movement will occur\r\n            this.active = false;\r\n        }\r\n        else {\r\n            // Update the position\r\n            world.setDust(x, y, null);\r\n            world.setDust(newX, newY, this);\r\n            // Agitate neighbors\r\n            world.getNeighbors(x, y, this.dispersionDistance)\r\n                .filter(function (dust) { return dust[0].physicsType == \"sand\"; })\r\n                .forEach(function (dust) {\r\n                dust[0].dispersionAmount = Math.max(dust[0].dispersionAmount, Math.max(0, _this.dispersionAmount - Math.sqrt(dust[1])));\r\n                dust[0].active = true;\r\n            });\r\n        }\r\n    };\r\n    Sand.prototype.tryDisperse = function (world, x, y, direction) {\r\n        var dir = direction == \"left\" ? -1 : 1;\r\n        var displacement = 0;\r\n        for (var disp = 1; disp < this.dispersionAmount; disp++) {\r\n            var dustBeside = world.getDust(x + disp * dir, y);\r\n            if (dustBeside !== null && dustBeside !== \"out-of-bounds\") {\r\n                break;\r\n            }\r\n            displacement = disp * dir;\r\n            var dustBelow_1 = world.getDust(x + displacement, y + 1);\r\n            if (dustBelow_1 === null && Math.random() * 5 < this.dispersionAmount) {\r\n                break;\r\n            }\r\n        }\r\n        if (displacement == 0) {\r\n            return null;\r\n        }\r\n        var dustBelow = world.getDust(x + displacement, y + 1);\r\n        if (dustBelow !== null) {\r\n            return { x: x + displacement, y: y, dispersion: displacement };\r\n        }\r\n        else {\r\n            return { x: x + displacement, y: y + 1, dispersion: displacement };\r\n        }\r\n    };\r\n    return Sand;\r\n}(_Dust__WEBPACK_IMPORTED_MODULE_0__.Dust));\r\n\r\n\n\n//# sourceURL=webpack://fallingsandtest/./src/DustType/Sand.ts?");

/***/ }),

/***/ "./src/DustType/Solid.ts":
/*!*******************************!*\
  !*** ./src/DustType/Solid.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Solid\": () => (/* binding */ Solid)\n/* harmony export */ });\n/* harmony import */ var _Dust__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Dust */ \"./src/Dust.ts\");\nvar __extends = (undefined && undefined.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        if (typeof b !== \"function\" && b !== null)\r\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n\r\nvar Solid = /** @class */ (function (_super) {\r\n    __extends(Solid, _super);\r\n    function Solid() {\r\n        var _this = _super.call(this, {\r\n            red: 100,\r\n            blue: 100,\r\n            green: 100\r\n        }) || this;\r\n        _this.active = false;\r\n        return _this;\r\n    }\r\n    Solid.prototype.step = function () {\r\n        this.active = false;\r\n    };\r\n    return Solid;\r\n}(_Dust__WEBPACK_IMPORTED_MODULE_0__.Dust));\r\n\r\n\n\n//# sourceURL=webpack://fallingsandtest/./src/DustType/Solid.ts?");

/***/ }),

/***/ "./src/DustType/Water.ts":
/*!*******************************!*\
  !*** ./src/DustType/Water.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Water\": () => (/* binding */ Water)\n/* harmony export */ });\n/* harmony import */ var _Dust__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Dust */ \"./src/Dust.ts\");\nvar __extends = (undefined && undefined.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        if (typeof b !== \"function\" && b !== null)\r\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\n\r\nvar Water = /** @class */ (function (_super) {\r\n    __extends(Water, _super);\r\n    function Water() {\r\n        var _this = _super.call(this, {\r\n            red: 40,\r\n            blue: 250,\r\n            green: 67\r\n        }) || this;\r\n        _this.velocity = { x: 0, y: 0 };\r\n        _this.dispersionFactor = 10;\r\n        _this.dispersionAmount = 0;\r\n        _this.framesSinceLastActivity = 0;\r\n        _this.physicsType = \"water\";\r\n        return _this;\r\n    }\r\n    Water.prototype.step = function (world, x, y) {\r\n        var dustBelow = world.getDust(x, y + 1);\r\n        var newX = x;\r\n        var newY = y;\r\n        var shouldInactivate = this.framesSinceLastActivity > 10;\r\n        if (dustBelow === null || dustBelow === \"out-of-bounds\" || (dustBelow.physicsType == \"water\" && this.velocity.y < dustBelow.velocity.y)) {\r\n            // If there is space below the current spec of dust, it should fall\r\n            this.dispersionAmount = Math.sqrt(this.velocity.y) * this.dispersionFactor;\r\n            this.velocity.y += world.gravity;\r\n            shouldInactivate = false;\r\n        }\r\n        else {\r\n            // Try to disperse the sand sideways\r\n            var dispersionOrder = Math.random() < 0.5 ? [\"left\", \"right\"] : [\"right\", \"left\"];\r\n            var dispersionResultA = this.tryDisperse(world, newX, newY, dispersionOrder[0]);\r\n            if (dispersionResultA !== null) {\r\n                shouldInactivate = shouldInactivate && this.framesSinceLastActivity > 50;\r\n                newX = dispersionResultA.x;\r\n                newY = dispersionResultA.y;\r\n            }\r\n            else {\r\n                var dispersionResultB = this.tryDisperse(world, newX, newY, dispersionOrder[1]);\r\n                if (dispersionResultB !== null) {\r\n                    shouldInactivate = shouldInactivate && this.framesSinceLastActivity > 50;\r\n                    newX = dispersionResultB.x;\r\n                    newY = dispersionResultB.y;\r\n                }\r\n                else {\r\n                    this.velocity.y = 0;\r\n                }\r\n            }\r\n            this.dispersionAmount = Math.max(10, this.dispersionAmount * 0.8 - 1);\r\n        }\r\n        // Try to move\r\n        var targetX = Math.round(x + this.velocity.x);\r\n        var targetY = Math.round(y + this.velocity.y);\r\n        var steps = this.getPointsTo({ x: x, y: y }, { x: targetX, y: targetY });\r\n        for (var i = 1; i < steps.length; i++) {\r\n            var step = steps[i];\r\n            var dustAtPosition = world.getDust(step.x, step.y);\r\n            if (dustAtPosition === \"out-of-bounds\") {\r\n                // This spec of sand fell out of the world.\r\n                // Just remove it\r\n                world.setDust(x, y, null);\r\n                return;\r\n            }\r\n            if (dustAtPosition === null) {\r\n                newX = step.x;\r\n                newY = step.y;\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        this.framesSinceLastActivity++;\r\n        if (newY != y) {\r\n            this.framesSinceLastActivity = 0;\r\n        }\r\n        if (shouldInactivate) {\r\n            // Inactivate the dust spec as no further movement will occur\r\n            this.active = false;\r\n        }\r\n        else {\r\n            // Update the position\r\n            world.setDust(x, y, null);\r\n            world.setDust(newX, newY, this);\r\n            world.activateAround(x, y);\r\n        }\r\n    };\r\n    Water.prototype.tryDisperse = function (world, x, y, direction) {\r\n        var dir = direction == \"left\" ? -1 : 1;\r\n        var displacement = 0;\r\n        var dispersionAmount = this.dispersionAmount;\r\n        for (var disp = 1; disp < dispersionAmount; disp++) {\r\n            var dustBeside = world.getDust(x + disp * dir, y);\r\n            if (dustBeside !== null && dustBeside !== \"out-of-bounds\" && dustBeside.physicsType !== \"water\") {\r\n                break;\r\n            }\r\n            if (dustBeside === null || dustBeside === \"out-of-bounds\") {\r\n                displacement = disp * dir;\r\n            }\r\n            var dustBelow_1 = world.getDust(x + displacement, y + 1);\r\n            if (dustBelow_1 === null && Math.random() * 5 < dispersionAmount) {\r\n                break;\r\n            }\r\n        }\r\n        if (displacement == 0) {\r\n            return null;\r\n        }\r\n        var dustBelow = world.getDust(x + displacement, y + 1);\r\n        if (dustBelow !== null) {\r\n            return { x: x + displacement, y: y, dispersion: displacement };\r\n        }\r\n        else {\r\n            return { x: x + displacement, y: y + 1, dispersion: displacement };\r\n        }\r\n    };\r\n    return Water;\r\n}(_Dust__WEBPACK_IMPORTED_MODULE_0__.Dust));\r\n\r\n\n\n//# sourceURL=webpack://fallingsandtest/./src/DustType/Water.ts?");

/***/ }),

/***/ "./src/World.ts":
/*!**********************!*\
  !*** ./src/World.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"World\": () => (/* binding */ World)\n/* harmony export */ });\n/* harmony import */ var _DustType_Solid__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./DustType/Solid */ \"./src/DustType/Solid.ts\");\n\r\nvar World = /** @class */ (function () {\r\n    function World(ctx, scale, width, height) {\r\n        this.gravity = 0.1;\r\n        this.scale = 1;\r\n        this.xStepDirection = -1;\r\n        this.width = width;\r\n        this.height = height;\r\n        this.ctx = ctx;\r\n        this.scale = scale;\r\n        this.dust = Array(width * height).fill(null);\r\n        // Create a floor\r\n        for (var y = Math.floor(height * 0.9); y < height; y++) {\r\n            for (var x = 0; x < width; x++) {\r\n                this.dust[this.getDustIndex(x, y)] = new _DustType_Solid__WEBPACK_IMPORTED_MODULE_0__.Solid();\r\n            }\r\n        }\r\n    }\r\n    World.prototype.renderAll = function () {\r\n        this.ctx.clearRect(0, 0, this.width * this.scale, this.height * this.scale);\r\n        for (var i = 0; i < this.width * this.height; i++) {\r\n            if (this.dust[i] === null) {\r\n                continue;\r\n            }\r\n            var x = i % this.width;\r\n            var y = (i - x) / this.width;\r\n            this.dust[i].render(this.ctx, this.scale, x, y);\r\n        }\r\n    };\r\n    World.prototype.step = function () {\r\n        this.xStepDirection = -this.xStepDirection;\r\n        var activeCount = 0;\r\n        for (var y = this.height - 1; y >= 0; y--) {\r\n            var layerActive = false;\r\n            for (var i = 0; i < this.width; i++) {\r\n                var x = this.xStepDirection == 1 ? i : this.width - 1 - i;\r\n                var dust = this.dust[this.getDustIndex(x, y)];\r\n                if (dust !== null && dust.active) {\r\n                    activeCount++;\r\n                    layerActive = true;\r\n                    dust.step(this, x, y);\r\n                }\r\n            }\r\n            if (layerActive) {\r\n                var a = \"test\"; // Allow for breakpoints here\r\n            }\r\n        }\r\n        console.log(\"Active: \", activeCount);\r\n    };\r\n    World.prototype.getDust = function (x, y) {\r\n        if (x < 0 || y < 0 || x >= this.width || y >= this.width) {\r\n            return \"out-of-bounds\";\r\n        }\r\n        return this.dust[this.getDustIndex(x, y)];\r\n    };\r\n    World.prototype.setDust = function (x, y, dust) {\r\n        if (x < 0 || y < 0 || x >= this.width || y >= this.width) {\r\n            return;\r\n        }\r\n        this.dust[this.getDustIndex(x, y)] = dust;\r\n        this.clearDust(x, y);\r\n        if (dust !== null) {\r\n            dust.render(this.ctx, this.scale, x, y);\r\n        }\r\n    };\r\n    World.prototype.getDustIndex = function (x, y) {\r\n        return y * this.width + x;\r\n    };\r\n    World.prototype.clearDust = function (x, y) {\r\n        this.ctx.clearRect(x * this.scale, y * this.scale, this.scale, this.scale);\r\n    };\r\n    World.prototype.fillCircle = function (center, radius, getDust) {\r\n        center = { x: Math.floor(center.x), y: Math.floor(center.y) };\r\n        for (var x = Math.max(center.x - radius, 0); x < center.x + radius * 2 && x < this.width; x++) {\r\n            for (var y = Math.max(center.y - radius, 0); y < center.y + radius * 2 && y < this.height; y++) {\r\n                if ((x - center.x) * (x - center.x) + (y - center.y) * (y - center.y) <= radius * radius) {\r\n                    var previousDust = this.getDust(x, y);\r\n                    var newDust = getDust(x, y);\r\n                    this.activateAround(x, y);\r\n                    if (previousDust === null || previousDust === \"out-of-bounds\" || newDust === null || previousDust.physicsType !== newDust.physicsType) {\r\n                        this.dust[this.getDustIndex(x, y)] = newDust;\r\n                        if (newDust !== null) {\r\n                            newDust.render(this.ctx, this.scale, x, y);\r\n                        }\r\n                        else {\r\n                            this.clearDust(x, y);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n    World.prototype.getNeighbors = function (x, y, distance) {\r\n        if (distance === void 0) { distance = 1; }\r\n        var result = [];\r\n        for (var x1 = x - distance; x1 <= x + distance; x1++) {\r\n            for (var y1 = y - distance; y1 <= y + distance; y1++) {\r\n                var dust = this.getDust(x1, y1);\r\n                if (dust != null && dust !== \"out-of-bounds\") {\r\n                    result.push([dust, (x - x1) * (x - x1) + (y - y1) * (y - y1)]);\r\n                }\r\n            }\r\n        }\r\n        return result;\r\n    };\r\n    World.prototype.activateAround = function (x, y) {\r\n        this.getNeighbors(x, y).forEach(function (dust) { return dust[0].active = true; });\r\n    };\r\n    return World;\r\n}());\r\n\r\n\n\n//# sourceURL=webpack://fallingsandtest/./src/World.ts?");

/***/ }),

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _DustType_Gravel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./DustType/Gravel */ \"./src/DustType/Gravel.ts\");\n/* harmony import */ var _DustType_Sand__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./DustType/Sand */ \"./src/DustType/Sand.ts\");\n/* harmony import */ var _DustType_Solid__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./DustType/Solid */ \"./src/DustType/Solid.ts\");\n/* harmony import */ var _DustType_Water__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./DustType/Water */ \"./src/DustType/Water.ts\");\n/* harmony import */ var _World__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./World */ \"./src/World.ts\");\n\r\n\r\n\r\n\r\n\r\nvar canvas = null;\r\nvar dustTypes = [\"none\", \"solid\", \"sand\", \"gravel\", \"water\"];\r\nvar currentDustIndex = 0;\r\nvar isDrawingDust = false;\r\nvar drawRadius = 10;\r\nvar mousePos = { x: 0, y: 0 };\r\nfunction load() {\r\n    document.body.style.margin = \"0\";\r\n    document.body.style.height = \"100vh\";\r\n    document.body.style.overflow = \"hidden\";\r\n    window.addEventListener(\"resize\", resize);\r\n    canvas = document.createElement(\"canvas\");\r\n    canvas.addEventListener(\"mousedown\", function (ev) { mouseMove(ev); isDrawingDust = true; });\r\n    canvas.addEventListener(\"mouseup\", function () { return isDrawingDust = false; });\r\n    canvas.addEventListener(\"mousemove\", mouseMove);\r\n    window.addEventListener(\"keydown\", keydown);\r\n    window.addEventListener(\"wheel\", function (ev) {\r\n        drawRadius = Math.max(1, drawRadius + Math.max(-1, Math.min(1, -ev.deltaY)));\r\n        console.log(drawRadius);\r\n    });\r\n    var ctx = canvas.getContext(\"2d\");\r\n    document.body.appendChild(canvas);\r\n    window.requestAnimationFrame(animationFrame);\r\n    var world = new _World__WEBPACK_IMPORTED_MODULE_4__.World(ctx, 1, 200, 200);\r\n    resize();\r\n    function animationFrame() {\r\n        if (isDrawingDust) {\r\n            var scale = canvas.height / world.height;\r\n            world.fillCircle({ x: mousePos.x / scale, y: mousePos.y / scale }, drawRadius, function () {\r\n                switch (dustTypes[currentDustIndex]) {\r\n                    case \"solid\":\r\n                        return new _DustType_Solid__WEBPACK_IMPORTED_MODULE_2__.Solid();\r\n                    case \"sand\":\r\n                        return new _DustType_Sand__WEBPACK_IMPORTED_MODULE_1__.Sand();\r\n                    case \"gravel\":\r\n                        return new _DustType_Gravel__WEBPACK_IMPORTED_MODULE_0__.Gravel();\r\n                    case \"water\":\r\n                        return new _DustType_Water__WEBPACK_IMPORTED_MODULE_3__.Water();\r\n                    default:\r\n                        return null;\r\n                }\r\n            });\r\n        }\r\n        world.step();\r\n        window.requestAnimationFrame(animationFrame);\r\n    }\r\n    function mouseMove(ev) {\r\n        var canvasBB = canvas.getBoundingClientRect();\r\n        mousePos.x = ev.clientX - canvasBB.x;\r\n        mousePos.y = ev.clientY - canvasBB.y;\r\n    }\r\n    function resize() {\r\n        if (canvas !== null) {\r\n            canvas.setAttribute(\"width\", document.body.clientWidth.toString());\r\n            canvas.setAttribute(\"height\", document.body.clientHeight.toString());\r\n            world.scale = Math.min(Math.floor(canvas.width / world.width), Math.floor(canvas.height / world.height));\r\n            world.renderAll();\r\n        }\r\n    }\r\n    function keydown(ev) {\r\n        if (Array.from({ length: 10 }, function (v, k) { return (k + 1).toString(); }).indexOf(ev.key) != -1) {\r\n            var index = Number(ev.key) - 1;\r\n            if (index >= 0 && index < dustTypes.length) {\r\n                currentDustIndex = index;\r\n                console.log(dustTypes[index]);\r\n            }\r\n        }\r\n    }\r\n}\r\nwindow.addEventListener(\"load\", load);\r\n\n\n//# sourceURL=webpack://fallingsandtest/./src/index.ts?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.ts");
/******/ 	
/******/ })()
;